// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //ALU
    Mux16(a= outA, b= inM, sel= instruction[12], out= outAM);     // select y input from A/M
    ALU(x= outD, y= outAM, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= outALU, out= outM, zr= outZr, ng= outNg);

    //A-register
    Mux16(a= instruction, b= outALU, sel= instruction[15], out= inA);  // selcct input for A    
    Not(in= instruction[15], out= AInstru);
    Or(a= AInstru, b= instruction[5], out= loadA);      // load A when A-instru or when (C-instru and A)
    ARegister(in= inA, load= loadA, out= outA, out[0..14]=addressM);
        
    //D-register
    And(a= instruction[15], b= instruction[4], out= loadD);     // load D when C-instru and D
    DRegister(in= outALU, load= loadD, out= outD);

    //PC
    And(a= instruction[2], b= outNg, out= NG);      // if <0
    And(a= NG, b= instruction[15], out= jumpLT);    // <0 jump when C-instru 
    And(a= instruction[1], b= outZr, out= ZR);      // if =0
    And(a= ZR, b= instruction[15], out= jumpZR);    // =0 jump when C-instru
    Not(in= outZr, out= notZr);
    Not(in= outNg, out= notNg);    
    And(a= notZr, b= notNg, out= PS);               // of >0
    And(a= instruction[0], b= instruction[15], out= jumpInstru);
    And(a= PS, b= jumpInstru, out= jumpPS);         // >0 jump when C-instru
    Or(a= jumpLT, b= jumpZR, out= jumpNPS);
    Or(a= jumpNPS, b= jumpPS, out= loadJump, out= notInc);  // decide if jump(load another pc value)
    Not(in= notInc, out=Inc);                       // not increase if load
    PC(in= outA, load= loadJump, inc= Inc, reset= reset, out[0..14]=pc);

    //write Memory  
    And(a= instruction[3], b= instruction[15], out= writeM);    // write Memory when C-instru and M
}